You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.


class Solution:
    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:
        p=len(grid)
        q=len(grid[0])
        nSquare=p*q

        creating dictionary
        dic={}
        for l in grid:
            for num in l:
                if num not in dic :
                    dic[num]=1
                else :
                    dic[num]+=1

        #while loop is slower 
        # i=0
        # dic={}
        # while i < p:
        #     j=0
        #     while j < q :
        #         if grid[i][j] not in dic :
        #             dic[grid[i][j]]=1
        #         else :
        #             dic[grid[i][j]]+=1
        #         j+=1
        #     i+=1

        #finding missing and reapeated elements in dic
        lis=[0,0]
        for i in range(1,nSquare+1):
            if i not in dic.keys():
                lis[1]=i
            elif dic[i]==2 :
                lis[0]=i

        # print(dic,lis)
        return lis
        
